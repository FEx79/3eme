/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package alimcb;

import Bean.BeanDBAccessORA;
import Tables.Movies;
import UseCouchDB.CouchDBConnect;
import java.awt.image.BufferedImage;
import java.beans.Beans;
import java.io.*;
import java.net.URL;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import oracle.sql.BLOB;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.BasicClientConnectionManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.ektorp.ViewQuery;
import org.ektorp.ViewResult;


/**
 *
 * @author delskev
 */
public class MainWindow extends javax.swing.JFrame {
    
    private Vector<Movies> filmToCommand;
    private CouchDBConnect connect;
    private BeanDBAccessORA dbaORA;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        //connexion à la base de données
        connect = new CouchDBConnect();
        filmToCommand = new Vector<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableFilm = new javax.swing.JTable();
        bCommander = new javax.swing.JButton();
        jquantite = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        menuResearchById = new javax.swing.JMenuItem();
        menuResearchByOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableFilm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "_id", "original_name", "votes", "rating", "tagline", "released", "runtime"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableFilm);

        bCommander.setText("Commander");
        bCommander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommanderActionPerformed(evt);
            }
        });

        jquantite.setText("0");

        jLabel1.setText("Quantité:");

        jMenu1.setText("Fichier");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Recherche");

        menuResearchById.setText("identifiant");
        menuResearchById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResearchByIdActionPerformed(evt);
            }
        });
        jMenu2.add(menuResearchById);

        menuResearchByOption.setText("critère");
        menuResearchByOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResearchByOptionActionPerformed(evt);
            }
        });
        jMenu2.add(menuResearchByOption);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bCommander)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jquantite, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCommander)
                    .addComponent(jquantite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuResearchByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResearchByIdActionPerformed
        String ident;
        
        //recherche par identifiant
        SearchById research = new SearchById(this, rootPaneCheckingEnabled);
        research.setVisible(true);
        ident = research.getIdent();
        research.setVisible(false);
        
        //recherche du film dans la db
        Movies movie = connect.RequestByIdToMovie(ident);
        filmToCommand.add(movie);
        //ajout dans la jtable
        addToJtable(movie);
        research.dispose();
        
    }//GEN-LAST:event_menuResearchByIdActionPerformed

    /**
     * spécifie les critères de sélection des films
     * @param evt 
     */
    private void menuResearchByOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResearchByOptionActionPerformed
        Vector<String> filmsRetenus = new Vector<>();
        Vector<String> temp = new Vector<>();
        
        //recherche par critère
        SearchByOption research = new SearchByOption(this, rootPaneCheckingEnabled);
        research.setVisible(true);
        
        
        
        //récupérations des critères de sélection
        HashMap<String, Vector<String>> criteres =  research.getOption();
        System.out.println("recherche acteurs");
        if( criteres.containsKey("acteur") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("acteur"), "_design/main", "movie_actors", false, true));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche realisateur");
        if( criteres.containsKey("réalisateur") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("réalisateur"), "_design/main", "movie_directors", false, true));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche titre");
        if( criteres.containsKey("titre") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("titre"), "_design/test", "name", true, false));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche rating");
        if( criteres.containsKey("popularité") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("popularité"), "_design/main", "rating", true, false));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche released");
        if( criteres.containsKey("date de sortie") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("date de sortie"), "_design/main", "released", true, true));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche genres");
        if( criteres.containsKey("genre") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("genre"), "_design/main", "genres", true, true));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche votes");
        if( criteres.containsKey("vote") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("vote"), "_design/main", "votes", true, false));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("recherche MPAA");
        if( criteres.containsKey("MPAA") ){
            filmsRetenus.addAll(SelectFromOption(criteres.get("MPAA"), "_design/main", "certification", true, false));
            System.out.println("fin recherche "+filmsRetenus.size()+" films trouve" );
        }
        System.out.println("fin recherche");
        //crée l'intersection des tuples
        if (research.isIntersect()){
            for (int i = 0; i < filmsRetenus.size(); i++) {
                for (int j = i+1; j < filmsRetenus.size(); j++) {
                    if( filmsRetenus.get(i).equals(filmsRetenus.get(j)) ){
                        temp.add(filmsRetenus.get(i));
                    }
                }
            }
            filmsRetenus.removeAllElements();
            filmsRetenus.addAll(temp);
        }
        for (int i = 0; i < filmsRetenus.size(); i++) {
            //recherche du film dans la db
            Movies result = connect.RequestByIdToMovie(filmsRetenus.elementAt(i));
            filmToCommand.add(result);
            //ajout dans la jtable
            addToJtable(result);
        }
        
        research.dispose();
    }//GEN-LAST:event_menuResearchByOptionActionPerformed

    /**
     * permet de commander une série de film
     * @param evt 
     */
    private void bCommanderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCommanderActionPerformed
        try {
            //TODO: connexion à oracle
            
            dbaORA = (BeanDBAccessORA)Beans.instantiate(null, "Bean.BeanDBAccessORA");
            // Connexion a la BDD
            dbaORA.init();
            //Créer les tuples
            Movies movie = connect.RequestByIdToMovie("100");
            dbaORA.initCall("PACKAGE_INSERT_CB", "insertFilm", 17);
            int quantite = Integer.parseInt( jquantite.getText() );
            int i;
            float moyenne = (float) 7.2;
            float ecarttype = (float) 2.0;
            float[][] tab = new float[filmToCommand.size()][2];
            if(jquantite.getText().equals("0")){
                        tab = Gauss(moyenne, ecarttype, filmToCommand.size());
            }
            
            for (i = 0; i < filmToCommand.size(); i++) {
                try {
                    if(jquantite.getText().equals("0")){
                        int retour = dbaORA.inserFilm(filmToCommand.get(i), (int)tab[i][0], (int)tab[i][1]);
                    }
                    else{
                        int retour = dbaORA.inserFilm(filmToCommand.get(i), quantite, quantite);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            System.out.println("ajout de "+i+"/"+filmToCommand.size()+" ajoutés.");
            dbaORA.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bCommanderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCommander;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jquantite;
    private javax.swing.JMenuItem menuResearchById;
    private javax.swing.JMenuItem menuResearchByOption;
    private javax.swing.JTable tableFilm;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Permet d'ajouter une ligne dnas la jtable en respectant les colonnes
     * @param item
     * @param rowName 
     */
    void addToJtable(Map<String, Object> item){
        Vector row = new Vector();
        DefaultTableModel dtm = (DefaultTableModel)this.tableFilm.getModel();
        for (Map.Entry<String, Object> entry : item.entrySet()) {
            //recherche des champs utiles
            for(int i = 0; i < dtm.getColumnCount(); i++){
                //préparation du tuple
                if( entry.getKey().equals(dtm.getColumnName(i))) {
                    row.add(entry.getValue());
                }
                
            }
        }
        
        //ajout dans la jtable
        
        dtm.addRow(row);
    }
    
    void addToJtable(Movies item){
        Vector row = new Vector();
        DefaultTableModel dtm = (DefaultTableModel)this.tableFilm.getModel();
        
        row.add(item.getId());
        row.add(item.getName());
        row.add(item.getVotes());
        row.add(item.getRating());
        row.add(item.getTagline());
        row.add(item.getReleased());
        row.add(item.getRuntime());
        //ajout dans la jtable
        
        dtm.addRow(row);
    }

    /**
     * permet d'interroger une vue pour en retirer des tuples
     * @param optionList
     * @param designDoc
     * @param view
     * @param searchForKey
     * @param multipleValue
     * @return 
     */
    public Vector<String> SelectFromOption(Vector<String> optionList, String designDoc, String view, boolean searchForKey, boolean multipleValue){ 
        Vector<String> filmsRetenus = new Vector<>();
        boolean find = false;
        //récupération de tout les tuples de la vue
        ViewQuery query = new ViewQuery().designDocId(designDoc).viewName(view);
        ViewResult result = connect.getDb().queryView(query);
        List<ViewResult.Row> rows = result.getRows();
        
        boolean searchFor = false;
        //parcours de tout les tuples
        for (int i = 0; i < rows.size(); i++) {
            String key = "";
            String value = "";
            String id = "";
            //recup la ligne à l'indice i
            ViewResult.Row row = rows.get(i);
            
            if(row.getId() != null){
                id = row.getId();
            }
            // recup la clé
            if( row.getKey() != null){
                key = row.getKey();
            }
            //recupère la ligne
            if(row.getValue() != null){
                value = row.getValue();
            }
            
            
            //recherche des film de l'option corrante
            for (int j = 0; j < optionList.size(); j++) {
                //prend une option  de la liste
                String option = optionList.elementAt(j);
                //verification de la clé + recherche de la valeur
                if(searchForKey){
                    
                    if(multipleValue){
                        if (key != "" && key.toString().toUpperCase().trim().contains(option.toUpperCase().trim())) {
                            if(!filmsRetenus.contains(id)) {
                                filmsRetenus.add(id);
                                find = true;
                            }
                        }
                    }
                    else{
                         if (key != "" && key.toUpperCase().trim().contains(option.toUpperCase().trim())) {
                            if(!filmsRetenus.contains(id)) {
                                filmsRetenus.add(id);
                                find = true;
                            }
                        }
                    
                    }
                }
                else{ 
                    if(multipleValue){
                        //si option présente dans la valeur
                        if(value != "" && value.toUpperCase().contains(option.toUpperCase())){
                            //évite les doublons
                            if(!filmsRetenus.contains(id)) {
                                filmsRetenus.add(id);
                            }
                        }
                    }
                    else{
                        //si option présente dans la valeur
                        if(value != "" && value.toUpperCase().equals(option.toUpperCase())){
                            //évite les doublons
                            if(!filmsRetenus.contains(id)) {
                                filmsRetenus.add(id);
                            }
                        }
                    }
                }
            }
        }
        //progress.dispose();
        
        return filmsRetenus;
    }

    
    /**
     * TODO
     * @param idFilm
     * @throws Exception 
     */
    
    
    private float[][] Gauss(float mean, float ecartType, int nbnumber) {
        //init de la génération aléatoire
        Random rand = new Random();
        float[][] result = new float[nbnumber][2];
        
        /*Génération des nombres aléatoires selon gauss*/
        for (int i = 0; i < nbnumber; i++) {
            float theta = 2 * (float) Math.PI * rand.nextFloat();
            float rho = (float) Math.sqrt(-2 * Math.log(1 - rand.nextFloat()));
            float scale = ecartType * rho;
            float x = (float) (mean + scale * Math.cos(theta));
            float y = (float) (mean + scale * Math.sin(theta));
            result[i][0] = Math.abs(x);
            result[i][1] = Math.abs(y);
        }
        
        return result;
    }
    
}
