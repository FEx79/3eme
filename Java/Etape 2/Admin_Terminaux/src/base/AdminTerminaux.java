/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package base;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author T4g1
 */
public class AdminTerminaux extends javax.swing.JFrame {
    private String ip;
    private int port;
    private String password;
    private Socket socket;
    private String status = "RUNNING";
    
    private OutputStream oStream;
    private InputStream iStream;
    
    /**
     * Creates new form AdminTerminaux
     */
    public AdminTerminaux() {
        initComponents();
        
        Properties properties = new Properties();
        try {
            properties.load(new FileInputStream("src/base/config.properties"));
        } catch (IOException ex) {
            Logger.getLogger(AdminTerminaux.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Connection au serveur
        this.ip = properties.getProperty("ip");
        this.port = Integer.parseInt(properties.getProperty("port"));
        this.password = properties.getProperty("password");
        
        try {
            // Connection au petra
            System.out.println("Connection sur " + ip + ":" + String.valueOf(port));
            socket = new Socket(ip, port);
            oStream = socket.getOutputStream();
            iStream = socket.getInputStream();
            System.out.println("Connecté");
        } catch (UnknownHostException ex) {
            System.out.println("Erreur d'ip");
            System.exit(0);
        } catch (IOException ex) {
            System.out.println("Erreur d'accept");
            System.exit(0);
        }
        
        if(socket == null) {
            System.out.println("Coonection echouée");
            System.exit(0);
        }
        
        try {
            String request = "LOGINA:" + password;
            oStream.write(request.getBytes());
            String reponse = read();
            System.out.println("Recu: '" + reponse + "'");
            if(!"LOGIN_SUCCESS".equals(reponse.trim())) {
                System.out.println("Erreur de login");
                System.exit(0);
            }
        } catch (IOException ex) {
            System.out.println("Demande de login échouée");
            System.exit(0);
        }
    }
    
    public String read()
    {
        try {
            byte[] l_byte = new byte[500];
            iStream.read(l_byte);
            String lut = (new String(l_byte)).trim();
            
            return lut;
        } catch (IOException ex) {
            return "";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListClient = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        statusText = new javax.swing.JLabel();
        refreshClient = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        switchPause = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jListClient);

        jLabel1.setText("Clients connecté:");

        jLabel2.setText("Statut serveur:");

        statusText.setText("RUNNING");

        refreshClient.setText("Rafraichir");
        refreshClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshClientActionPerformed(evt);
            }
        });

        jButton2.setText("!!! ETEINDRE !!!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        switchPause.setText("switch state");
        switchPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(refreshClient)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2)
                        .addGap(57, 57, 57)
                        .addComponent(statusText)
                        .addGap(18, 18, 18)
                        .addComponent(switchPause))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(statusText)
                    .addComponent(refreshClient)
                    .addComponent(switchPause))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            oStream.write("STOP".getBytes());
        } catch (IOException ex) {
            System.out.println("Erreur lors de ETEINDRE");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void refreshClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshClientActionPerformed
        try {
            oStream.write("LCLIENTS".getBytes());
            
            String reply = read();
            String[] split = reply.split(":", 50);
            System.out.println("Recu: " + reply);
            DefaultListModel model = new DefaultListModel();
            
            model.clear();
            for(String client: split) {
                model.addElement(client);
            }
            jListClient.setModel(model);
            jListClient.invalidate();
        } catch (IOException ex) {
            System.out.println("Erreur lors de refresh client");
        }
    }//GEN-LAST:event_refreshClientActionPerformed

    private void switchPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchPauseActionPerformed
        try {
            switch (statusText.getText()) {
                case "RUNNING":
                    statusText.setText("PAUSE");
                    oStream.write("PAUSE".getBytes());
                    break;
                case "PAUSE":
                    statusText.setText("RUNNING");
                    oStream.write("UNPAUSE".getBytes());
                    break;
            }
        } catch (IOException ex) {
            System.out.println("Erreur lors de la mise en pause (ou de la sortie de pause)");
        }
    }//GEN-LAST:event_switchPauseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminTerminaux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminTerminaux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminTerminaux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminTerminaux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AdminTerminaux().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jListClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshClient;
    private javax.swing.JLabel statusText;
    private javax.swing.JButton switchPause;
    // End of variables declaration//GEN-END:variables
}
