
import Entity.Order;
import Entity.Room;
import TableModel.OrderTableModel;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * Application de gestion des occupations
 */
public class ApplicOccupation extends javax.swing.JFrame {
    private Socket sock;

    /**
     * Creates new form ApplicOccupation
     */
    public ApplicOccupation() {
        initComponents();
        
        TextAreaOutputStream taos = TextAreaOutputStream.getInstance(output);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        loginField = new javax.swing.JTextField();
        ipField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jOrderTable = new javax.swing.JTable();
        absentButton = new javax.swing.JButton();
        presentButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Occupation");

        portField.setText("40001");

        jLabel1.setText("IP:");

        disconnectButton.setText("Deconnection");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        loginField.setText("admin");

        ipField.setText("127.0.0.1");

        jLabel3.setText("Login:");

        jLabel4.setText("Password:");

        jLabel2.setText("Port:");

        connectButton.setText("Connection");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        passwordField.setText("admin");

        output.setColumns(20);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        jOrderTable.setModel(new OrderTableModel());
        jScrollPane4.setViewportView(jOrderTable);

        absentButton.setText("Absent");
        absentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absentButtonActionPerformed(evt);
            }
        });

        presentButton.setText("Présent");
        presentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Rafraîchir");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(presentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(absentButton))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disconnectButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton)
                    .addComponent(disconnectButton)
                    .addComponent(jLabel3)
                    .addComponent(loginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(absentButton)
                    .addComponent(presentButton)
                    .addComponent(refreshButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        if(sock == null) {
            System.out.println("Aucune connection en cours ...");
            return;
        }

        try {
            sock.close();
            sock = null;
            System.out.println("Deconnecte du serveur");
        } catch (IOException ex) {
            System.out.println("Impossible de se deconnecter");
        }
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Deconnection
        if(sock != null) {
            disconnectButtonActionPerformed(evt);
        }

        String ip = ipField.getText();
        int port = Integer.parseInt(portField.getText());

        // Vérifie le port
        if(port < 40000) {
            System.out.append("Le port entre n'est pas valide (< 4000)");
            return;
        }

        System.out.println("Tentative de connection au serveur " + ip + ":" + port);

        try {
            sock = new Socket(ip, port);
        } catch (UnknownHostException ex) {
            System.out.println("L'ip " + ip + " n'est pas valide");
            return;
        } catch (IOException ex) {
            System.out.println("Impossible de joindre le serveur a l'adresse " + ip + ":" + port);
            return;
        }

        System.out.println("Connection reussie");

        String login = loginField.getText();
        String password = passwordField.getText();
        if(doLogin(login, password)) {
            System.out.println("Authentification reussie");
            
            refreshBookList();
        }
        else {
            System.out.println("Authentification impossible, abandon de la connexion");
            disconnectButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshBookList();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void presentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentButtonActionPerformed
        setOrderStatus(1);
    }//GEN-LAST:event_presentButtonActionPerformed

    private void absentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absentButtonActionPerformed
        setOrderStatus(0);
    }//GEN-LAST:event_absentButtonActionPerformed

    /**
     * Modifie la commande selectionnée
     * @param status 
     */
    public void setOrderStatus(int status) {
        // Récupére la commande
        int selectedOrder = jOrderTable.getSelectedRow();
        if(selectedOrder <= -1) {
            JOptionPane.showMessageDialog(
                    new JFrame(), "Aucune réservation n'est séléctionnée",
                    "Modification échoué ...",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        OrderTableModel model = (OrderTableModel)jOrderTable.getModel();
        Order order = model.getValueAt(selectedOrder);
        
        System.out.println("Tentative de modification ...");
        
        // Création de la requête
        Request reply, requ = new Request("ARRROOM");
        if(status == 0) {
            requ.setCommande("MISROOM");
        }
        requ.addArg(Integer.toString(order.getId()));
        
        reply = requ.sendAndRecv(sock);
        
        // Résultat
        if(reply.getCommande().compareTo("OK") == 0) {
            System.out.println("Modification validee");
            refreshBookList();
        }
        else {
            System.out.println("Impossible d'appliquer la modification");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicOccupation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicOccupation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicOccupation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicOccupation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ApplicOccupation().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton absentButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JTextField ipField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTable jOrderTable;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField loginField;
    private javax.swing.JTextArea output;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portField;
    private javax.swing.JButton presentButton;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Tentative d'authentification de l'utilisateur
     * @param login     Login de l'utilisateur
     * @param password  Password de l'utilisateur
     */
    private boolean doLogin(String login, String password) {
        byte[] digest = Request.getDigest(password);
        
        // Construit la requete de LOGIN
        Request reply, requ = new Request("LOGIN");
        requ.addArg(login);
        requ.addArg(digest);
        requ.encrypt();
        
        reply = requ.sendAndRecv(sock);
        
        // Vérifie la réussite de la commande
        String result = reply.getCommande();
        return result.compareTo("LOGIN_SUCCESS") == 0;
    }

    /**
     * Rafraichit la liste des commandes réalisées
     */
    private void refreshBookList() {
        System.out.println("Mise a jour de la liste des reservations ...");
        Request.quickSend("BDROOM", sock);
        Request reply = Request.recv(sock);
        
        // Réponse érronée
        if(reply.getCommande().compareTo("LROOM") != 0) {
            System.out.println("Impossible de mettre a jour la liste des reservations");
            return;
        }
        
        System.out.println("Affichage des " + reply.getArgs().size() + " reservations recue(s)");
        
        // Parcourt la réponse
        ArrayList<Order> l_order = new ArrayList<>();
        for(byte[] l_byte : reply.getArgs()) {
            Order order = (Order)Common.fromByte(l_byte);
            l_order.add(order);
        }
        
        // Mise a jour du tableau
        OrderTableModel model = (OrderTableModel)jOrderTable.getModel();
        model.setListing(l_order);
        jOrderTable.invalidate();
        jOrderTable.updateUI();
    }
}
