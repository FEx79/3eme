/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chessgameclient;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import piece.*;
import piece.Piece.Equipe;

/**
 *
 * @author T4g1
 */
public class GameGUI extends javax.swing.JFrame {
    private static final int GRID_WIDTH = 8;
    private static final int GRID_HEIGHT = 8;
    
    private CaseGUI[][] l_case = new CaseGUI[GRID_WIDTH][GRID_HEIGHT];
    private JPanel echiquier = new JPanel(
            new GridLayout(GRID_WIDTH, GRID_HEIGHT));
    
    private List<Piece> l_piece;
    private CaseGUI selectedCase;
    
    //<editor-fold defaultstate="collapsed" desc="Constructeurs">
    
    /**
     * Initialise la grille de jeu
     */
    public GameGUI(){
        selectedCase = null;
        
        // Crée toutes les cases du jeu
        for(int y=0; y<GRID_HEIGHT; y++)
        {
            for(int x=0; x<GRID_WIDTH; x++)
            {
                // Donne la position de la case a cette derniére
                l_case[x][y] = new CaseGUI(this, x, y);
                
                // Modifie la couleur de la case
                if((x + y) % 2 == 0)
                {
                    l_case[x][y].setBackground(Color.WHITE);
                }
                else
                {
                    l_case[x][y].setBackground(Color.BLACK);
                }
        
                // AJoute la case sur l'échéquier
                echiquier.add(l_case[x][y]);
            }
        }
        
        // Ajoute l'échiquier dans la fenêtre
        add(echiquier);
        
        // Modifie les dimensions de la fenêtre
        Dimension window_size = new Dimension();
        window_size.width = GRID_WIDTH * CaseGUI.getCaseWidth();
        window_size.height = GRID_HEIGHT * CaseGUI.getCaseHeight();
        
        setSize(window_size);
        setResizable(false);
        
        // Liste des piéces en jeu
        l_piece = new ArrayList<Piece>();
        
        l_piece.add(new Tour    (0, 0, Equipe.NOIR));
        l_piece.add(new Cavalier(1, 0, Equipe.NOIR));
        l_piece.add(new Fou     (2, 0, Equipe.NOIR));
        l_piece.add(new Reine   (3, 0, Equipe.NOIR));
        l_piece.add(new Roi     (4, 0, Equipe.NOIR));
        l_piece.add(new Fou     (5, 0, Equipe.NOIR));
        l_piece.add(new Cavalier(6, 0, Equipe.NOIR));
        l_piece.add(new Tour    (7, 0, Equipe.NOIR));
        l_piece.add(new Pion    (0, 1, Equipe.NOIR));
        l_piece.add(new Pion    (1, 1, Equipe.NOIR));
        l_piece.add(new Pion    (2, 1, Equipe.NOIR));
        l_piece.add(new Pion    (3, 1, Equipe.NOIR));
        l_piece.add(new Pion    (4, 1, Equipe.NOIR));
        l_piece.add(new Pion    (5, 1, Equipe.NOIR));
        l_piece.add(new Pion    (6, 1, Equipe.NOIR));
        l_piece.add(new Pion    (7, 1, Equipe.NOIR));
        
        l_piece.add(new Tour    (0, 7, Equipe.BLANC));
        l_piece.add(new Cavalier(1, 7, Equipe.BLANC));
        l_piece.add(new Fou     (2, 7, Equipe.BLANC));
        l_piece.add(new Reine   (3, 7, Equipe.BLANC));
        l_piece.add(new Roi     (4, 7, Equipe.BLANC));
        l_piece.add(new Fou     (5, 7, Equipe.BLANC));
        l_piece.add(new Cavalier(6, 7, Equipe.BLANC));
        l_piece.add(new Tour    (7, 7, Equipe.BLANC));
        l_piece.add(new Pion    (0, 6, Equipe.BLANC));
        l_piece.add(new Pion    (1, 6, Equipe.BLANC));
        l_piece.add(new Pion    (2, 6, Equipe.BLANC));
        l_piece.add(new Pion    (3, 6, Equipe.BLANC));
        l_piece.add(new Pion    (4, 6, Equipe.BLANC));
        l_piece.add(new Pion    (5, 6, Equipe.BLANC));
        l_piece.add(new Pion    (6, 6, Equipe.BLANC));
        l_piece.add(new Pion    (7, 6, Equipe.BLANC));
        
        // Ajoute les piéce sur leurs position de départ
        for(Piece piece: l_piece) {
            l_case[piece.getX()][piece.getY()].addPiece(piece);
        }
    }
    
    //</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GameGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Permet à une case de prévenir qu'on a clické dessus
     * 
     * @param case          Case clickée
     */
    public void onClic(CaseGUI _case)
    {
        // Premier clic
        if(selectedCase == null) {
            if(_case.getPiece() != null)
                selectedCase = _case;
        }
        else {
            moveTo(_case);
        }
    }
    
    /**
     * Déplace la péice séléctionnée vers la case donnée
     * 
     * @param _case         Case de destination
     */
    public void moveTo(CaseGUI _case)
    {
        
    }
}
